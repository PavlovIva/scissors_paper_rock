# –ò–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ
from aiogram import Router, types
from aiogram.types import KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.filters import Text, Command
from config.config import user_move, bot_move, likes_count, state
import random


# –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–º –∑–Ω–∞—á–µ–Ω–∏–π
router = Router()
kb_builder = ReplyKeyboardBuilder()

sc: str = '‚úÇ'
rock: str = 'üóø'
paper: str = 'üßª'
button_scissors = (KeyboardButton(text=sc))
button_rock = (KeyboardButton(text=rock))
button_paper = (KeyboardButton(text=paper))

kb_builder.row(button_scissors, button_paper, button_rock)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–æ–¥–∞ –±–æ—Ç–∞
def pick_random() -> str:
    return random.choice([sc, rock, paper])


# –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É
@router.message(Command(commands='play'))
async def play(msg: types.Message):
    await msg.answer(text='Game started! Make your move.', reply_markup=kb_builder.as_markup(resize_keyboard=True))
    if msg.from_user.id not in likes_count:
        likes_count[msg.from_user.id] = 0
    state['attempts_total'] = 0
    bot_move[1] = pick_random()
    print(bot_move)


# –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ "–Ω–æ–∂–Ω–∏—Ü—ã"
@router.message(Text(text=sc))
async def scissors(msg: types.Message):
    state['attempts_total'] += 1
    await msg.reply('So let it be!')
    likes_count[msg.from_user.id] += 1
    if msg.from_user.id not in user_move:
        user_move[msg.from_user.id] = {}
    user_move[msg.from_user.id][likes_count[msg.from_user.id]] = sc
    if state['attempts_total'] == 3:
        await msg.reply('Game is finished! Try again!', reply_markup=ReplyKeyboardRemove())
    print(user_move)


# –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ "–∫–∞–º–µ–Ω—å".
@router.message(Text(text=rock))
async def scissors(msg: types.Message):
    state['attempts_total'] += 1
    await msg.reply('So let it be!')
    likes_count[msg.from_user.id] += 1
    if msg.from_user.id not in user_move:
        user_move[msg.from_user.id] = {}
    user_move[msg.from_user.id][likes_count[msg.from_user.id]] = rock
    if state['attempts_total'] == 3:
        await msg.reply('Game is finished! Try again!', reply_markup=ReplyKeyboardRemove())
    print(user_move)


# –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞ "–±—É–º–∞–≥–∞"
@router.message(Text(text=paper))
async def scissors(msg: types.Message):
    state['attempts_total'] += 1
    await msg.reply('So let it be!')
    likes_count[msg.from_user.id] += 1
    if msg.from_user.id not in user_move:
        user_move[msg.from_user.id] = {}
    user_move[msg.from_user.id][likes_count[msg.from_user.id]] = paper
    if state['attempts_total'] == 3:
        await msg.reply('Game is finished! Try again!', reply_markup=ReplyKeyboardRemove())
    print(user_move)

